#lang sicp
; 实现简单的treeMap

(define (make-table) 
   (define (entry tree) (car tree)) 
   (define (left-branch tree) (cadr tree)) 
   (define (right-branch tree) (caddr tree)) 
   (define (make-tree entry left right) 
     (list entry left right)) 
  
   (define (node-key entry) 
     (car entry)) 
   (define (node-value entry) 
     (cdr entry)) 
   (define (make-node key value) 
     (cons key value)) 
   (define (set-value! node value) 
     (set-cdr! node value))

  (let ((root (list )))
    (define (inner-lookup key)
      (define (iter tree)
        (cond ((null? tree) #f)
              (else
               (let ((node (entry tree))
                     (left-b (cadr tree))
                     ;(nodekey )
                     (right (right-branch tree)))
                 (cond ((= key (node-key node)) (node-value node))
                       ((< key (node-key node)) (iter left-b))
                       ((> key (node-key node)) (iter right)))))))
      (iter root))
    (define (insert key value)
      (define (iter tree)
        (let ((newnode (make-node key value)))
          (cond ((null? tree) (make-tree newnode '() '()))
                (else
               (let ((node (entry tree))
                     (left (left-branch tree))
                     ;(nodekey (node-key node))
                     (right (right-branch tree)))
                 (cond ((= key (node-key node)) (set-value! node value))
                       ((< key (node-key node)) (make-tree node (iter left) right))
                       ((> key (node-key node)) (make-tree node left (iter right)))))))))
      (set! root (iter root)))

     (define (dispatch m) 
       (cond ((eq? m 'get) inner-lookup) 
             ((eq? m 'put) insert) 
             ((eq? m 'display) (display root) (newline)) 
             (else (error "Unknown operation -- TREE" m))))
    dispatch))

 (define (show tree) (tree 'display)) 
 (define (get tree key) ((tree 'get) key)) 
 (define (put tree key value) ((tree 'put) key value)) 


 (define t (make-table)) 
 (show t) 
 ((t 'put) 7 'a) 
 (show t) 
 ((t 'put) 3 'b)
(show t) 
 ((t 'get) 7)
(put t 1 'y)
(put t 4 'z)
(show t)
(put t 12 'h)
(put t 9 'g)
(put t 16 'big)
(show t)
;; ->                        ((7 . a)
;;            ((3 . b)                             ((12 . h) 
;; ((1 . y) () ()) ((4 . z) () ())) || ((9 . g) () ()) ((16 . big) () ())))

  